plugins {
    id 'java'
    id 'io.qameta.allure' version '2.11.2'
}

group 'org.example'
version '1.0-SNAPSHOT'

allure {
    report {
        version.set ("2.19.0")
    }
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set("2.19.0")
            }
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2',
            'com.codeborne:selenide:6.12.3',
            'io.qameta.allure:allure-selenide:2.21.0',
            'org.slf4j:slf4j-simple:2.0.5',
            'com.codeborne:pdf-test:1.8.1',
            'org.assertj:assertj-core:3.24.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
}

test {
    useJUnitPlatform()
    systemProperties(System.getProperties())
}

tasks.withType(Test){
    systemProperties(System.getProperties())
    useJUnitPlatform()


    if (System.getProperty("threads") != null) {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled'                 : true,
                'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy'         : 'custom',
                'junit.jupiter.execution.parallel.config.fixed.parallelism': System.getProperty("threads").toInteger()
        ]
    }

    testLogging {
        lifecycle {
//            events "started", "failed"
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

compileTestJava{
    options.encoding = 'UTF-8'
}